import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final aspects.AddOnAspect object$rac): (execution( * aspects.AddOnAspect..*+.*(..))
          || execution(aspects.AddOnAspect..*+.new(..))
          || execution( * aspects.AddOnAspect+.*(..))
          || execution(aspects.AddOnAspect+.new(..)) || (adviceexecution() && within(aspects.AddOnAspect+))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * aspects.AddOnAspect..*+.*(..))
          || execution(aspects.AddOnAspect..*+.new(..))
          || execution( * aspects.AddOnAspect+.*(..))
          || execution(aspects.AddOnAspect+.new(..)) || (adviceexecution() && within(aspects.AddOnAspect+))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final aspects.AddOn object$rac): (execution( * aspects.AddOn..*+.*(..))
          || execution(aspects.AddOn..*+.new(..))
          || execution( * aspects.AddOn+.*(..))
          || execution(aspects.AddOn+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * aspects.AddOn..*+.*(..))
          || execution(aspects.AddOn..*+.new(..))
          || execution( * aspects.AddOn+.*(..))
          || execution(aspects.AddOn+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final aspects.Coffee object$rac): (execution( * aspects.Coffee..*+.*(..))
          || execution(aspects.Coffee..*+.new(..))
          || execution( * aspects.Coffee+.*(..))
          || execution(aspects.Coffee+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * aspects.Coffee..*+.*(..))
          || execution(aspects.Coffee..*+.new(..))
          || execution( * aspects.Coffee+.*(..))
          || execution(aspects.Coffee+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final aspects.main object$rac): (execution( * aspects.main..*+.*(..))
          || execution(aspects.main..*+.new(..))
          || execution( * aspects.main+.*(..))
          || execution(aspects.main+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * aspects.main..*+.*(..))
          || execution(aspects.main..*+.new(..))
          || execution( * aspects.main+.*(..))
          || execution(aspects.main+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}